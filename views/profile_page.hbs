<!DOCTYPE>
<html>
    {{> head_tag title="User Profile"}}
	<body>
        <div class="min-h-full flex flex-col">
            {{> header}}
            <div class="flex-grow">
                <div class="w-full flex flex-col align-center justify-center">
                    <div class="px-3 w-full flex flex-col text-center">
                        <div class="font-bold text-6xl">
                            {{profile.display_name}}
                        </div>
                        <div class="font-semibold text-2xl">
                            {{profile.grade.number}}th Grade | {{profile.ion_username}}
                        </div>
                    </div>
                    <div class="w-full flex flex-col px-3">
                        <div class="text-center font-bold text-3xl">
                            Reviews
                        </div>
                        <div class="text-right font-semibold text-green-700 text-sm" id="add_class">
                            <a onclick="toggle_add_class()" class="text-green-700">Add a Class</a>
                        </div>
                        <div class="text-right font-semibold text-red-700 text-sm hidden" id="cancel_add">
                            <a onclick="toggle_cancel_add()" class="text-red-700">Cancel</a>
                        </div>
                        <div class="hidden overflow-x-auto" id="add_class_table">
                            <table class="w-full">
                                <thead>
                                    <tr>
                                        <th class="font-bold">Class Name&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold">Class ID&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold">Term&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold">Teacher&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold" title="Overall rating of the class, scale of 0(Awful)-10(Best)">SCO&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold" title="Average amount of time spent on HW in this class per week">WRK&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold" title="Overall difficulty of the class, scale of 0(Easy)-10(Hard)">DIFF&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold" title="Overall enjoyment of the class, scale of 0(No enjoyment)-10(Very enjoyable)">ENJ&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold" title="Overall rating of the teacher, scale of 0(Awful)-10(Best) â€” Display on feedback?">TCH (Show?)&nbsp;<span class="text-red-500" title="Required">*</span></th>
                                        <th class="font-bold" title="Grade in the class. You may input a valid letter grade or a number">GRD</th>
                                        <th class="font-bold" title="Written feedback about the class (max 2500 characters)">Feedback</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <form onsubmit="return submit_feedback()" action="submit_feedback" method="POST">
                                            <th class="text-left w-1/6" class="px-1">
                                                <input type="search" list="class_names" name="class_name" onfocus="change_helper(0)" class="pl-1 w-full border border-black" id="names_input" onfocusout="change_id()" autocomplete="off" required>
                                                <datalist id="class_names">
                                                    {{#each classes}}
                                                        <option value="{{this.name}}{{#if this.alt}} ({{this.alt}}){{/if}}">
                                                    {{/each}}
                                                </datalist>
                                            </th>
                                            <th class="px-1">
                                                <input type="search" list="class_id" name="class_id" onfocus="change_helper(1)" class="pl-1 w-full border border-black" size="8" id="id_input" onfocusout="change_class()" autocomplete="off" required>
                                                <datalist id="class_id">
                                                    {{#each classes}}
                                                        <option value="{{this.id}}">
                                                    {{/each}}
                                                </datalist>
                                            </th>
                                            <th class="px-1">
                                                <input type="search" list="terms" name="term" onfocus="change_helper(2)" class="pl-1 w-full border border-black" size="18" id="term_input" autocomplete="off" required>
                                                <datalist id="terms">
                                                    {{#each terms}}
                                                        <option value="{{this}}">
                                                    {{/each}}
                                                </datalist>
                                                <datalist id="terms_yr">
                                                    {{#each terms_yr}}
                                                        <option value="{{this}}">
                                                    {{/each}}
                                                </datalist>
                                                <datalist id="terms_sem">
                                                    {{#each terms_sem}}
                                                        <option value="{{this}}">
                                                    {{/each}}
                                                </datalist>
                                                <datalist id="terms_yr_no_summer">
                                                    {{#each terms_yr}}
                                                        {{#if (check_not_summer this)}}
                                                            <option value="{{this}}">
                                                        {{/if}}
                                                    {{/each}}
                                                </datalist>
                                                <datalist id="terms_sem_no_summer">
                                                    {{#each terms_sem}}
                                                        {{#if (check_not_summer this)}}
                                                            <option value="{{this}}">
                                                        {{/if}}
                                                    {{/each}}
                                                </datalist>
                                                <datalist id="terms_spring">
                                                    {{#each terms_sem}}
                                                        {{#if (only_spring this)}}
                                                            <option value="{{this}}">
                                                        {{/if}}
                                                    {{/each}}
                                                </datalist>
                                                <datalist id="terms_fall">
                                                    {{#each terms_sem}}
                                                        {{#if (only_fall this)}}
                                                            <option value="{{this}}">
                                                        {{/if}}
                                                    {{/each}}
                                                </datalist>
                                            </th>
                                            <th class="px-1">
                                                <input name="teacher" list="teacher_list" onfocus="change_helper(3)" class="pl-1 w-full border border-black" size="10" id="teacher_input" autocomplete="off" required>
                                                <datalist id="teacher_list">
                                                    {{#each teachers}}
                                                        <option value="{{this}}">
                                                    {{/each}}
                                                </datalist>
                                            </th>
                                            <th class="px-1">
                                                <input name="class_score" onfocus="change_helper(4)" type="number" style="width: 50px;" step="any" class="pl-1 w-full border border-black" min="0" max="10" id="class_score_input" autocomplete="off" required>
                                            </th>
                                            <th class="px-1">
                                                <input name="workload" onfocus="change_helper(5)" type="number" style="width: 50px;" step="any" class="pl-1 w-full border border-black" min="0" id="workload_input" autocomplete="off" required>
                                            </th>
                                            <th class="px-1">
                                                <input name="difficulty" onfocus="change_helper(6)" type="number" style="width: 50px;" step="any" class="pl-1 w-full border border-black" min="0" max="10" id="difficulty_input" autocomplete="off" required>
                                            </th>
                                            <th class="px-1">
                                                <input name="enjoyment" onfocus="change_helper(7)" type="number" style="width: 50px;" step="any" class="pl-1 w-full border border-black" min="0" max="10" id="enjoyment_input" autocomplete="off" required>
                                            </th>
                                            <th>
                                                <div class="flex flex-row items-center justify-center">
                                                    <input name="teacher_score" onfocus="change_helper(8)" type="number" style="width: 50px;" step="any" class="pl-1 w-full border border-black" min="0" max="10" id="teacher_score_input" autocomplete="off" required>&nbsp;
                                                    <input name="show_teacher" type="checkbox" id="show_teacher_input" checked>
                                                </div>
                                            </th>
                                            <th class="px-1">
                                                <input name="grade" onfocus="change_helper(9)" class="pl-1 w-full border border-black" size="4" id="grade_score_input" autocomplete="off">
                                            </th>
                                            <th class="pl-1 w-1/4" class="px-1">
                                                <textarea name="feedback" onfocus="change_helper(10)" class="pl-1 w-full border border-black" id="feedback_input"></textarea>
                                            </th>
                                            <th class="font-semibold text-green-700">
                                                <input type="submit" value="Submit" class="bg-white hover_pointer font-semibold">
                                            </th>
                                        </form>
                                    </tr>
                                    <tr>
                                        <th colspan="13" class="font-base text-base text-center" id="helper_text">

                                        </th>
                                    </tr>
                                </tbody>
                            </table>
                            <div class="text-center hidden text-red-700" id="error_msg">
                                ERROR!
                            </div>
                        </div>
                        {{#no_reviews reviews}}
                        <div class="text-center font-semibold">
                            You have inputted no reviews yet.
                        </div>
                        {{/no_reviews}}
                        <div class="flex flex-col overflow-x-auto">
                            <table class="w-full">
                                <tbody>
                                    {{#each reviews}}
                                    <tr>
                                        <th colspan="13" class="font-bold text-3xl text-left">
                                            {{this.term}}
                                        </th>
                                    </tr>
                                        <tr>
                                            <th class="font-bold">Class Name</th>
                                            <th class="font-bold">Class ID</th>
                                            <th class="font-bold">Review Time</th>
                                            <th class="font-bold">Term</th>
                                            <th class="font-bold">Teacher</th>
                                            <th class="font-bold" title="Overall rating of the class, scale of 0(Awful)-10(Best)">SCO</th>
                                            <th class="font-bold" title="Average amount of time spent on HW in this class per week">WRK</th>
                                            <th class="font-bold" title="Overall difficulty of the class, scale of 0(Easy)-10(Hard)">DIFF</th>
                                            <th class="font-bold" title="Overall enjoyment of the class, scale of 0(No enjoyment)-10(Very enjoyable)">ENJ</th>
                                            <th class="font-bold" title="Overall rating of the teacher, scale of 0(Awful)-10(Best) â€” Display on feedback?">TCH (Show?)</th>
                                            <th class="font-bold" title="Grade in the class. You may input a valid letter grade or a number">GRD</th>
                                            <th class="font-bold" title="Written feedback about the class (max 2500 characters)">Feedback</th>
                                            <th></th>
                                        </tr>
                                        {{#each this.reviews}}
                                        <tr id="{{class_id}}_{{remove_spaces_dashes this.term}}_const">
                                            <th class="text-left w-1/6"><a href="/class/{{this.class_id}}" class="text-black">{{this.name}}</a></th>
                                            <th>{{this.class_id}}</th>
                                            <th>{{format_date this.review_time}} {{#if this.edit_time}}<span class="font-semibold" title="Edited on {{format_date this.edit_time}}">*</span>{{/if}}</th>
                                            <th>{{format_term this.term}}</th>
                                            <th>{{this.teacher}}</th>
                                            <th>{{fix_number_profile this.class_score}}/10</th>
                                            <th>{{fix_number_profile this.workload}} hrs/wk</th>
                                            <th>{{fix_number_profile this.difficulty}}/10</th>
                                            <th>{{fix_number_profile this.enjoyment}}/10</th>
                                            <th>{{fix_number_profile this.teacher_score}}/10&nbsp;({{display_bool this.show_teacher}})</th>
                                            <th>{{this.grade_input}}</th>
                                            <th class="w-1/4">{{this.feedback}}</th>
                                            <th><a class="text-green-700 font-semibold" onclick="display_edit(this.id)" id="{{class_id}}_{{remove_spaces_dashes this.term}}_edit">Edit</a></th>
                                        </tr>
                                        <form onsubmit="return edit_feedback(this.id)" action="edit_feedback" method="POST" id="{{class_id}}_{{remove_spaces_dashes this.term}}_form">
                                            <tr class="hidden" id="{{class_id}}_{{remove_spaces_dashes this.term}}_inputs">
                                                <th class="text-left w-1/6"><input name="class_name" class="pl-1 w-full border border-black hidden" value="{{this.name}}" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_names_input">{{this.name}}</th>
                                                <th><input name="class_id" class="pl-1 w-full border border-black hidden" value={{this.class_id}} id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_id_input">{{this.class_id}}</th>
                                                <th>{{format_date this.review_time}} {{#if this.edit_time}}<span class="font-semibold" title="Edited on {{format_date this.edit_time}}">*</span>{{/if}}</th>
                                                <th>
                                                    <input name="review_id" class="pl-1 w-full border border-black hidden " size="18" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_review_id" autocomplete="off" required value="{{this.review_id}}" data-original="{{this.review_id}}">
                                                    <input name="original_term" class="pl-1 w-full border border-black hidden " size="18" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_original_term" autocomplete="off" required value="{{this.term}}" data-original="{{this.term}}">
                                                    <input type="search" list="{{find_term_list this.term this.name}}" name="term" class="pl-1 w-full border border-black" size="18" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_term_input" autocomplete="off" required value="{{this.term}}" data-original="{{this.term}}">
                                                </th>
                                                <th><input name="teacher" list="teacher_list" class="pl-1 w-full border border-black" size="10" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_teacher_input" autocomplete="off" required value="{{this.teacher}}" data-original="{{this.teacher}}"></th>
                                                <th><input name="class_score" type="number" style="width: 50px;" step="any" class="pl-1 border border-black" min="0" max="10" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_class_score_input" autocomplete="off" required value={{fix_number_profile this.class_score}} data-original={{fix_number_profile this.class_score}}></th>
                                                <th><input name="workload" type="number" style="width: 50px;" step="any" class="pl-1 border border-black" min="0" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_workload_input" autocomplete="off" required value={{fix_number_profile this.workload}} data-original={{fix_number_profile this.workload}}></th>
                                                <th><input name="difficulty" type="number" style="width: 50px;" step="any" class="pl-1 border border-black" min="0" max="10" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_difficulty_input" autocomplete="off" required value={{fix_number_profile this.difficulty}} data-original={{fix_number_profile this.difficulty}}></th>
                                                <th><input name="enjoyment" type="number" style="width: 50px;" step="any" class="pl-1 border border-black" min="0" max="10" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_enjoyment_input" autocomplete="off" required value={{fix_number_profile this.enjoyment}} data-original={{fix_number_profile this.enjoyment}}></th>
                                                <th>
                                                    <div class="flex flex-row items-center justify-center">
                                                        <input name="teacher_score" type="number" style="width: 50px;" step="any" class="pl-1 border border-black" min="0" max="10" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_teacher_score_input" autocomplete="off" required value={{fix_number_profile this.teacher_score}} data-original={{fix_number_profile this.teacher_score}}>&nbsp;
                                                        <input name="show_teacher" type="checkbox" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_show_teacher_input" data-original={{this.show_teacher}} {{#if this.show_teacher}}checked{{/if}}>
                                                    </div>
                                                </th>
                                                <th><input name="grade" class="pl-1 w-full border border-black" size="4" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_grade_score_input" autocomplete="off" value="{{this.grade_input}}" data-original="{{this.grade_input}}"></th>
                                                <th class="w-1/4"><textarea name="feedback" class="pl-1 w-full border border-black" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_feedback_input" data-original="{{this.feedback}}">{{this.feedback}}</textarea></th>
                                                <th>
                                                    <input type="submit" value="Submit" class="bg-white hover_pointer font-semibold text-green-700" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_submit"><br>
                                                    <a class="text-blue-700 font-semibold" onclick="cancel_edit(this.id)" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_cancel">Cancel</a><br>
                                                    <a class="text-red-700 font-semibold" onclick="delete_edit(this.id)" id="{{this.class_id}}_{{remove_spaces_dashes this.term}}_delete">Delete</a><br>
                                                </th>
                                            </tr>
                                            <tr class="text-center hidden" id="{{class_id}}_{{remove_spaces_dashes this.term}}_delete_confirm">
                                                <th colspan="13">
                                                    Are you sure you want to delete this input? <br> <input name="delete_feedback" type="number" class="hidden" value="0" id="{{class_id}}_{{remove_spaces_dashes this.term}}_delete_input">
                                                    <span class="font-semibold text-red-700"><input type="submit" value="Yes" class="bg-white hover_pointer font-semibold text-red-700" onclick="change_delete(this.id)" id="{{class_id}}_{{remove_spaces_dashes this.term}}_confirm_delete" formnovalidate></span> | <span class="font-semibold text-green-700 hover_pointer" onclick="cancel_delete(this.id)" id="{{class_id}}_{{remove_spaces_dashes this.term}}_cancel_delete">No</span>
                                                </th>
                                            </tr>
                                        </form>
                                        <tr class="text-center font-semibold text-red-700 hidden" id="{{class_id}}_{{remove_spaces_dashes this.term}}_error_msg">
                                            <th colspan="13" id="{{class_id}}_{{remove_spaces_dashes this.term}}_error_msg_row">
                                                Error!
                                            </th>
                                        </tr>
                                        {{/each}}
                                    {{/each}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            {{> footer}}
        </div>
    </body>
    <script>
        let id_to_name = {}
        let name_to_id = {}
        let name_to_length = {}
        {{#each classes}}
            id_to_name["{{this.id}}"] = "{{this.name}}{{#if this.alt}} ({{this.alt}}){{/if}}"
            name_to_id["{{this.name}}{{#if this.alt}} ({{this.alt}}){{/if}}"] = "{{this.id}}"
            name_to_length["{{this.name}}{{#if this.alt}} ({{this.alt}}){{/if}}"] = "{{this.length}}"
        {{/each}}

        let TERMS = new Set()
        {{#each terms}}
            TERMS.add("{{this}}")
        {{/each}}

        function replace_dash(s) {
            return s.replace(/ /g, "-")
        }

        function change_helper(index) {
            let HELPER_TEXT = ["The name of the class you are inputting a review for.",
                "The ID of the class you are inputting a review for. It will automatically be added once you select a class from the class name.",
                "The term you took the class in. Year long classes are 20XX-20XY. Semester classes are Fall/Spring/Summer XX, where XX is the year.",
                "The last name of the teacher you had for this class. Current TJHSST teachers may be selected from the dropdown list, however if your teacher is not teaching here anymore, you will need to type your teacher name out.",
                "Your overall rating of the class, from a range of 0 (Awful) to 10 (The Best)",
                "The amount of time you spent on working for this class in hours per week",
                "How difficult you found the class to be, from a range of 0 (Very Easy) to 10 (Very Hard)",
                "Your level of enjoyment from the class, from a range of 0 (No Enjoyment) to 10 (Very Enjoyable)",
                "Your rating of the teacher of the class, from a range of 0 (Awful Teacher) to 10 (The Best Teacher). The checkbox may be deselected if you do not want your teacher to displayed on the reviews page if you write feedback on the course.",
                "Your final grade of the class. Note that this input is not required. You may input a numerical answer, or a letter grade (A, A-, B+, B, ect.). When calculating average grade of a class, A=95, A-=91, B+=88, B=85, B-=81, C+=78, C=75, C-=71, D+=68, D=65, F=60",
                "Written feedback for the class. Please remember to be civil. There is a max of 2500 characters."
            ]

            document.getElementById('helper_text').innerHTML = HELPER_TEXT[index]
        }
        function toggle_add_class() {
            document.getElementById("add_class").classList.add('hidden');
            document.getElementById("cancel_add").classList.remove('hidden');
            document.getElementById("add_class_table").classList.remove('hidden');
            document.getElementById("error_msg").classList.add('hidden')
        }
        function toggle_cancel_add() {
            document.getElementById("add_class").classList.remove('hidden');
            document.getElementById("cancel_add").classList.add('hidden');
            document.getElementById("add_class_table").classList.add('hidden');
            document.getElementById("names_input").value = ""
            document.getElementById("id_input").value = ""
            document.getElementById("term_input").value = ""
            document.getElementById("teacher_input").value = ""
            document.getElementById("class_score_input").value = ""
            document.getElementById("workload_input").value = ""
            document.getElementById("difficulty_input").value = ""
            document.getElementById("enjoyment_input").value = ""
            document.getElementById("teacher_score_input").value = ""
            document.getElementById("show_teacher_input").checked = true
            document.getElementById("grade_score_input").value = ""
            document.getElementById("feedback_input").value = ""
            document.getElementById("error_msg").classList.add('hidden')
            document.getElementById('helper_text').innerHTML = ""
        }
        function change_id() {
            let name = document.getElementById("names_input").value.replace('&', '&amp;')
            if (name in name_to_id) {
                document.getElementById("id_input").value = name_to_id[name]
                if (name.indexOf("(Spring)") !== -1) {
                     document.getElementById('term_input').setAttribute('list', 'terms_spring')
                }
                else if (name.indexOf("(Fall)") !== -1) {
                     document.getElementById('term_input').setAttribute('list', 'terms_fall')
                }
                else {
                    if (name_to_length[name] === "Full Year") {
                        if (!(name === "Foundations of Computer Science (Foundations CS)" || name === "Ancient &amp; Classical Civilizations" || name === "Chemistry 1" || name === "TJ Math 5" || name === "TJ Research Stat 1 (RS1)")) {
                            document.getElementById('term_input').setAttribute('list', 'terms_yr_no_summer')
                        }
                        else {
                            document.getElementById('term_input').setAttribute('list', 'terms_yr')
                        }
                    }
                    else {
                        if (!(name === "Foundations of Computer Science (Foundations CS)" || name === "Ancient &amp; Classical Civilizations" || name === "Chemistry 1" || name === "TJ Math 5" || iname === "TJ Research Stat 1 (RS1)")) {
                            document.getElementById('term_input').setAttribute('list', 'terms_sem_no_summer')
                        }
                        else {
                            document.getElementById('term_input').setAttribute('list', 'terms_sem')
                        }
                    }
                }
            }
            else {
                document.getElementById('term_input').setAttribute('list', 'terms')
            }
        }
        function change_class() {
            let id = document.getElementById("id_input").value
            if (id in id_to_name) {
                document.getElementById("names_input").value = id_to_name[id].replace('&amp;', '&')
                if (id_to_name[id].indexOf("(Spring)") !== -1) {
                     document.getElementById('term_input').setAttribute('list', 'terms_spring')
                }
                else if (id_to_name[id].indexOf("(Fall)") !== -1) {
                     document.getElementById('term_input').setAttribute('list', 'terms_fall')
                }
                else {
                    if (name_to_length[id_to_name[id]] === "Full Year") {
                        if (!(id_to_name[id] === "Foundations of Computer Science (Foundations CS)" || id_to_name[id] === "Ancient &amp; Classical Civilizations" || id_to_name[id] === "Chemistry 1" || id_to_name[id] === "TJ Math 5" || id_to_name[id] === "TJ Research Stat 1 (RS1)")) {
                            document.getElementById('term_input').setAttribute('list', 'terms_yr_no_summer')
                        }
                        else {
                            document.getElementById('term_input').setAttribute('list', 'terms_yr')
                        }
                    }
                    else {
                        if (!(id_to_name[id] === "Foundations of Computer Science (Foundations CS)" || id_to_name[id] === "Ancient &amp; Classical Civilizations" || id_to_name[id] === "Chemistry 1" || id_to_name[id] === "TJ Math 5" || id_to_name[id] === "TJ Research Stat 1 (RS1)")) {
                            document.getElementById('term_input').setAttribute('list', 'terms_sem_no_summer')
                        }
                        else {
                            document.getElementById('term_input').setAttribute('list', 'terms_sem')
                        }
                    }
                }
            }
            else {
                document.getElementById('term_input').setAttribute('list', 'terms')
            }
        }
        function display_edit(id) {
            let term = id.substring(id.indexOf('_')+1, id.indexOf('_', id.indexOf('_')+1))
            term = replace_dash(term)
            // console.log(term)
            document.getElementById(id.substring(0, id.indexOf("_")) + "_" + term + "_const").classList.add('hidden');
            document.getElementById(id.substring(0, id.indexOf("_")) + "_" + term + "_inputs").classList.remove('hidden');
        }
        function cancel_edit(id) {
            let class_id = id.substring(0, id.indexOf("_"))
            let term = id.substring(id.indexOf('_')+1, id.indexOf('_', id.indexOf('_')+1))
            term = replace_dash(term)
            document.getElementById(class_id + "_" + term + "_const").classList.remove('hidden');
            document.getElementById(class_id + "_" + term + "_inputs").classList.add('hidden');
            document.getElementById(class_id + "_" + term + "_term_input").value = document.getElementById(class_id + "_" + term + "_term_input").dataset.original
            document.getElementById(class_id + "_" + term + "_teacher_input").value = document.getElementById(class_id + "_" + term + "_teacher_input").dataset.original
            document.getElementById(class_id + "_" + term + "_class_score_input").value = document.getElementById(class_id + "_" + term + "_class_score_input").dataset.original
            document.getElementById(class_id + "_" + term + "_workload_input").value = document.getElementById(class_id + "_" + term + "_workload_input").dataset.original
            document.getElementById(class_id + "_" + term + "_difficulty_input").value = document.getElementById(class_id + "_" + term + "_difficulty_input").dataset.original
            document.getElementById(class_id + "_" + term + "_enjoyment_input").value = document.getElementById(class_id + "_" + term + "_enjoyment_input").dataset.original
            document.getElementById(class_id + "_" + term + "_teacher_score_input").value = document.getElementById(class_id + "_" + term + "_teacher_score_input").dataset.original
            if (document.getElementById(class_id + "_" + term + "_show_teacher_input").dataset.original == true) {
                document.getElementById(class_id + "_" + term + "_show_teacher_input").checked = true
            }
            else {
                document.getElementById(class_id + "_" + term + "_show_teacher_input").checked = false
            }
            document.getElementById(class_id + "_" + term + "_grade_score_input").value = document.getElementById(class_id + "_" + term + "_grade_score_input").dataset.original
            document.getElementById(class_id + "_" + term + "_feedback_input").value = document.getElementById(class_id + "_" + term + "_feedback_input").dataset.original
            document.getElementById(class_id + "_" + term + "_delete_confirm").classList.add('hidden')
            document.getElementById(class_id + "_" + term + "_error_msg").classList.add('hidden')
            document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = ""
        }
        function delete_edit(id) {
            let class_id = id.substring(0, id.indexOf("_"))
            let term = id.substring(id.indexOf('_')+1, id.indexOf('_', id.indexOf('_')+1))
            term = replace_dash(term)
            document.getElementById(class_id + "_" + term + "_delete_confirm").classList.remove('hidden')
        }
        function cancel_delete(id) {
            let class_id = id.substring(0, id.indexOf("_"))
            let term = id.substring(id.indexOf('_')+1, id.indexOf('_', id.indexOf('_')+1))
            term = replace_dash(term)
            document.getElementById(class_id + "_" + term + "_delete_confirm").classList.add('hidden')
        }
        function change_delete(id) {
            let class_id = id.substring(0, id.indexOf("_"))
            let term = id.substring(id.indexOf('_')+1, id.indexOf('_', id.indexOf('_')+1))
            term = replace_dash(term)
            document.getElementById(class_id + "_" + term + "_delete_input").value = 1
        }
        function submit_feedback() {
            document.getElementById("error_msg").classList.add('hidden')

            let input_names =["Class Name", "ID", "Term", "Teacher", "Class Score", "Workload", "Difficulty", "Enjoyment", "Teacher Score", "Grade Score", "Feedback"]
            let inputs = []
            inputs.push(document.getElementById("names_input").value)
            inputs.push(document.getElementById("id_input").value)
            inputs.push(document.getElementById("term_input").value)
            inputs.push(document.getElementById("teacher_input").value)
            inputs.push(document.getElementById("class_score_input").value)
            inputs.push(document.getElementById("workload_input").value)
            inputs.push(document.getElementById("difficulty_input").value)
            inputs.push(document.getElementById("enjoyment_input").value)
            inputs.push(document.getElementById("teacher_score_input").value)
            inputs.push(document.getElementById("grade_score_input").value)
            inputs.push(document.getElementById("feedback_input").value)

            for (let i = 0; i < inputs.length-2; i++) {
                if (inputs[i] === "") {
                    document.getElementById("error_msg").innerHTML = "Error! " + input_names[i] + " field is required."
                    document.getElementById("error_msg").classList.remove('hidden')
                    return false
                }
            }

            if (!(inputs[0].replace("&", "&amp;")) in name_to_id) {
                document.getElementById("error_msg").innerHTML = "Error! Class name not found."
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("names_input").focus()
                return false
            }
            if (!(inputs[1]) in id_to_name) {
                document.getElementById("error_msg").innerHTML = "Error! Class ID not found."
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("id_input").focus()
                return false
            }

            if (name_to_id[inputs[0].replace("&", "&amp;")] != inputs[1] || id_to_name[inputs[1]].replace("&amp;", "&") != inputs[0]) {
                document.getElementById("error_msg").innerHTML = "Error! Class Name and ID do not match."
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("names_input").focus()
                return false
            }

            if (!(TERMS.has(inputs[2]))) {
                document.getElementById("error_msg").innerHTML = "Error! Not a valid term."
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("term_input").focus()
                return false
            }

            if (/[^a-zA-Z]/.test(inputs[3][0])) {
                document.getElementById("error_msg").innerHTML = "Error! Invalid teacher name."
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("teacher_input").focus()
                return false
            }
            if (/[^a-zA-Z\-. ]/.test(inputs[3])) {
                document.getElementById("error_msg").innerHTML = "Error! Invalid teacher name."
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("teacher_input").focus()
                return false
            }

            for (let i = 4; i < 9; i++) {
                if (i == 5) {
                    if (parseFloat(inputs[i]) < 0) {
                        document.getElementById("error_msg").innerHTML = "Error! " + input_names[i] + " input is outside the valid range (0-99)."
                        document.getElementById("error_msg").classList.remove('hidden')
                        return false
                    }
                }
                else {
                    if (parseFloat(inputs[i]) > 10 || parseFloat(inputs[i]) < 0) {
                        document.getElementById("error_msg").innerHTML = "Error! " + input_names[i] + " input is outside the valid range (0-10)."
                        document.getElementById("error_msg").classList.remove('hidden')
                        return false
                    }
                }

            }

            if (!(inputs[9] === "")) {
                let grades = new Set(["A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "F"])

                if (isNaN(inputs[9])) {
                    if (!(grades.has(inputs[9].toUpperCase()))) {
                        document.getElementById("error_msg").innerHTML = "Error! Invalid grade input."
                        document.getElementById("error_msg").classList.remove('hidden')
                        document.getElementById("grade_score_input").focus()
                        return false
                    }
                }
                else {
                    if (parseFloat(inputs[9]) < 0 || parseFloat(inputs[9]) > 100) {
                        document.getElementById("error_msg").innerHTML = "Error! Grade input is outside the valid range."
                        document.getElementById("error_msg").classList.remove('hidden')
                        document.getElementById("grade_score_input").focus()
                        return false
                    }
                }
            }

            if (inputs[10].length > 2500) {
                document.getElementById("error_msg").innerHTML = "Error! Feedback is too long (max 2500 characters)!"
                document.getElementById("error_msg").classList.remove('hidden')
                document.getElementById("feedback_input").focus()
                return false
            }

            if (name_to_length[inputs[0].replace("&", "&amp;")] === "Full Year" && !((inputs[0] === "Foundations of Computer Science (Foundations CS)" || inputs[0] === "Ancient & Classical Civilizations" || inputs[0] === "Chemistry 1") && !(inputs[2].indexOf('Summer') == -1))) {
                if (!(inputs[2].indexOf(' ') == -1)) {
                    document.getElementById("error_msg").innerHTML = "Error! Term and class name mismatch."
                    document.getElementById("error_msg").classList.remove('hidden')
                    document.getElementById("term_input").focus()
                    return false
                }
            }
            if (!(name_to_length[inputs[0].replace("&", "&amp;")] === "Full Year")) {
                if (inputs[2].indexOf(' ') == -1) {
                    document.getElementById("error_msg").innerHTML = "Error! Term and class name mismatch."
                    document.getElementById("error_msg").classList.remove('hidden')
                    document.getElementById("term_input").focus()
                    return false
                }
            }

            if (!(inputs[2].indexOf('Summer') == -1)) {
                if (!(inputs[0] === "Foundations of Computer Science (Foundations CS)" || inputs[0] === "Ancient & Classical Civilizations" || inputs[0] === "Chemistry 1" || inputs[0] === "TJ Math 5" || inputs[0] === "TJ Research Stat 1 (RS1)")) {
                    document.getElementById("error_msg").innerHTML = "Error! This class is not offered in the summer."
                    document.getElementById("error_msg").classList.remove('hidden')
                    document.getElementById("term_input").focus()
                    return false
                }
            }

            return true
        }
        function edit_feedback(id) {
            let class_id = id.substring(0, id.indexOf("_"))
            let term = id.substring(id.indexOf('_')+1, id.indexOf('_', id.indexOf('_')+1))
            term = replace_dash(term)
            // console.log(document.getElementById(class_id + "_" + term + "_delete_input").value)
            if(document.getElementById(class_id + "_" + term + "_delete_input").value == 1) {
                return true
            }

            document.getElementById(class_id + "_" + term + "_error_msg").classList.add('hidden')

            let input_names =["Class Name", "ID", "Term", "Teacher", "Class Score", "Workload", "Difficulty", "Enjoyment", "Teacher Score", "Grade Score", "Feedback"]
            let inputs = []
            inputs.push(document.getElementById(class_id + "_" + term + "_names_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_id_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_term_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_teacher_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_class_score_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_workload_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_difficulty_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_enjoyment_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_teacher_score_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_grade_score_input").value)
            inputs.push(document.getElementById(class_id + "_" + term + "_feedback_input").value)

            for (let i = 0; i < inputs.length-2; i++) {
                if (inputs[i] === "") {
                    document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! " + input_names[i] + " field is required."
                    document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                    return false
                }
            }

            if (!(TERMS.has(inputs[2]))) {
                document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Not a valid term."
                document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                document.getElementById(class_id + "_" + term + "_term_input").focus()
                return false
            }

            if (/[^a-zA-Z]/.test(inputs[3][0])) {
                document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Invalid teacher name."
                document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                document.getElementById(class_id + "_" + term + "_teacher_input").focus()
                return false
            }
            if (/[^a-zA-Z\-. ]/.test(inputs[3])) {
                document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Invalid teacher name."
                document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                document.getElementById(class_id + "_" + term + "_teacher_input").focus()
                return false
            }

            for (let i = 4; i < 9; i++) {
                if (i == 5) {
                    if (parseFloat(inputs[i]) < 0) {
                        document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! " + input_names[i] + " input is outside the valid range (0-99)."
                        document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                        return false
                    }
                }
                else {
                    if (parseFloat(inputs[i]) > 10 || parseFloat(inputs[i]) < 0) {
                        document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! " + input_names[i] + " input is outside the valid range (0-10)."
                        document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                        return false
                    }
                }

            }

            if (!(inputs[9] === "")) {
                let grades = new Set(["A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "F"])

                if (isNaN(inputs[9])) {
                    if (!(grades.has(inputs[9].toUpperCase()))) {
                        document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Invalid grade input."
                        document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                        document.getElementById(class_id + "_" + term + "_grade_score_input").focus()
                        return false
                    }
                }
                else {
                    if (parseFloat(inputs[9]) < 0 || parseFloat(inputs[9]) > 100) {
                        document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Grade input is outside the valid range."
                        document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                        document.getElementById(class_id + "_" + term + "_grade_score_input").focus()
                        return false
                    }
                }
            }

            if (inputs[10].length > 2500) {
                document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Feedback is too long (max 2500 characters)!"
                document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                document.getElementById(class_id + "_" + term + "_feedback_input").focus()
                return false
            }

            if (name_to_length[inputs[0].replace("&", "&amp;")] === "Full Year" && !((inputs[0] === "Foundations of Computer Science (Foundations CS)" || inputs[0] === "Ancient & Classical Civilizations" || inputs[0] === "Chemistry 1") && !(inputs[2].indexOf('Summer') == -1))) {
                if (inputs[2].indexOf('-') == -1) {
                    document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Term and class name mismatch."
                    document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                    document.getElementById(class_id + "_" + term + "_term_input").focus()
                    return false
                }
            }
            if (!(name_to_length[inputs[0].replace("&", "&amp;")] === "Full Year")) {
                if (!(inputs[2].indexOf('-') == -1)) {
                    document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! Term and class name mismatch."
                    document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                    document.getElementById(class_id + "_" + term + "_term_input").focus()
                    return false
                }
            }

            if (!(inputs[2].indexOf('Summer') == -1)) {
                if (!(inputs[0] === "Foundations of Computer Science (Foundations CS)" || inputs[0] === "Ancient & Classical Civilizations" || inputs[0] === "Chemistry 1" || inputs[0] === "TJ Math 5" || inputs[0] === "TJ Research Stat 1 (RS1)")) {
                    document.getElementById(class_id + "_" + term + "_error_msg_row").innerHTML = "Error! This class is not offered in the summer."
                    document.getElementById(class_id + "_" + term + "_error_msg").classList.remove('hidden')
                    document.getElementById(class_id + "_" + term + "_term_input").focus()
                    return false
                }
            }

            return true
        }
    </script>
</html>
